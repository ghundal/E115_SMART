networks:
    smart-network:
        external: true
services:
    postgres:
        build:
            context: .
            dockerfile: Dockerfile.postgres
        container_name: postgres
        restart: unless-stopped
        shm_size: 1g
        volumes:
            - ${PERSISTENT_DIR}/postgres:/var/lib/postgresql/data
            - ../sql/init.sql:/docker-entrypoint-initdb.d/init.sql
        environment:
            - POSTGRES_PASSWORD=postgres
        ports:
            - "5432:5432"
        networks:
            - smart-network
    datapipeline:
        depends_on:
            - postgres
        image: ${DP_IMAGE_NAME}
        container_name: datapipeline
        volumes:
            - ${SECRETS_DIR}:/secrets:ro
            - ${BASE_DIR}/datapipeline:/app
        environment:
            GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS
            GCP_PROJECT: $GCP_PROJECT
            DB_HOST: postgres
            NVIDIA_VISIBLE_DEVICES: all
            NVIDIA_DRIVER_CAPABILITIES: compute,utility
        deploy:
            resources:
                reservations:
                    devices:
                        - driver: nvidia
                          count: all
                          capabilities: [ gpu ]
        networks:
            - smart-network
        command: datapipeline.py
    api:
        depends_on:
            - postgres
        image: ${API_IMAGE_NAME}
        container_name: api
        volumes:
            - ${BASE_DIR}/api:/app
            - ${SECRETS_DIR}:/secrets:ro
        ports:
            - "9000:9000"
        environment:
            DB_HOST: postgres
            NVIDIA_VISIBLE_DEVICES: all
            NVIDIA_DRIVER_CAPABILITIES: compute,utility
            GOOGLE_CREDENTIALS_FILE: $GOOGLE_CREDENTIALS_FILE
            DEV: 1
        deploy:
            resources:
                reservations:
                    devices:
                        - driver: nvidia
                          count: all
                          capabilities: [ gpu ]
        networks:
            - smart-network
        tty: true
    frontend:
        image: ${FRONTEND_IMAGE_NAME}
        container_name: frontend
        ports:
            - "3000:3000"
        networks:
            - smart-network
